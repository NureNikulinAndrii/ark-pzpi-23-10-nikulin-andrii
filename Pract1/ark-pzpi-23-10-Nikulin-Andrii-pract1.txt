Міністерство освіти і науки У	країни
Харківський національний університет радіоелектроніки
                                           Кафедра програмної інженерії






Практична робота №1
з дисципліни: «Аналіз та рефакторинг коду»
на тему: «Рекомендації для написання чистого та якісного коду на Lua»














Виконав:                                                                                                          
ст.гр. ПЗПІ-23-10
Нікулін Андрій 


Перевірив: 
Старший викладач кафедри ПІ
Сокорчук І.П.










Харків 2025 
ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень121.10.20250.1Створено розділ "Мета роботи" та додано опис ключових рекомендацій Lua.222.10.20250.2Створено та деталізовано розділ "Хід роботи" (включно з обґрунтуванням рекомендацій та прикладами коду).322.10.20250.3Створено розділ "Висновки" та фіналізовано результати дослідження.423.10.20251.0Додано розділ "Використані джерела". Звіт оформлено та підготовлено до подання.


Мета роботи:

Метою роботи є дослідження та систематизація ключових рекомендацій щодо написання якісного, чистого та продуктивного коду мовою програмування Lua.

Хід роботи:

Робота виконувалася послідовно згідно з поставленими завданнями:

Вибір та опис мови (Слайди 2–3). Була обрана мова Lua, оскільки її архітектура (єдина структура даних — таблиця) та фокус на вбудовуванні вимагають специфічних правил чистого кодування, відмінних від інших мов. Особливо наголошено на важливості Lua у сфері ігрової розробки.

Формулювання цілей якості (Слайд 4). Встановлено, що рекомендації мають покращувати читабельність, підтримуваність, продуктивність та надійність коду.

Систематизація рекомендацій та їхнє обґрунтування (Слайди 5–11):
• Стильові рекомендації (Слайд 5): Встановлено використання 4 пробілів для відступів та пробілів навколо бінарних операторів для чіткості.
Приклад: 









Рисунок 1 – Приклад використання пробілів

• Область видимості (Рекомендація 1): Обґрунтовано обов'язкове використання ключового слова local для змінних і функцій, оскільки це прискорює доступ до даних (до 20 разів) та запобігає забрудненню глобального простору імен _G.
• Іменування (Рекомендація 2): Впроваджено стандарти snake_case для змінних/функцій та ALL_CAPS_SNAKE_CASE для констант.
Приклад: 













Рисунок 2 – Приклад гарного іменування


• Індексація таблиць (Рекомендація 3): Встановлено правило використання крапкової нотації (.) для статичних ключів та квадратних дужок ([]) для динамічних.
Приклад: 
























Рисунок 3 – Приклад індексації таблиць

• Документування (Рекомендація 4): Запропоновано використання стандарту LuaDoc для автоматизованої документації та підказок в IDE.
Приклад: 












Рисунок 4 – Приклад гарного коментування

• Оптимізація (Рекомендація 5): Введено правило кешування глобальних функцій (table.insert, math.min тощо) у локальні змінні для підвищення продуктивності у циклах.
Приклад: 

Рисунок 5 – Приклад оптимізування

• Обробка помилок (Рекомендація 6): Запропоновано використання функції pcall для безпечного виконання потенційно небезпечного коду та забезпечення надійності системи.
Приклад: 
Рисунок 6 – Приклад обробки помилок

Оформлення та фіналізація. Створено презентацію у форматі .pptx, підготовлено спіч та звіт відповідно до вимог.


Висновки : 
В результаті проведеної роботи було досягнуто поставленої мети: систематизовано та наочно представлено ключові рекомендації для написання якісного коду на мові Lua.

Дисципліноване дотримання сформульованих рекомендацій забезпечує наступні переваги:
• Підвищення продуктивності: Використання local та кешування глобальних функцій дозволяє максимально ефективно використовувати Віртуальну машину Lua.
• Покращення підтримуваності: Застосування патернів модульності та snake_case робить код передбачуваним та легким для внесення змін.
• Забезпечення надійності: Використання функції pcall дозволяє граційно обробляти помилки, запобігаючи аварійному завершенню програми.
• Якісне документування: LuaDoc сприяє створенню інтерактивної та актуальної документації.


Використані джерела

• The Lua Programming Language (або Programming in Lua, 4th Edition). Автор: Roberto Ierusalimschy. (Основний довідник від творця мови). https://www.lua.org/pil/contents.html
• Офіційна Документація Lua 5.4 Джерело: https://www.lua.org/manual/5.4
• Roblox Developer Documentation (Luau): https://create.roblox.com/docs/getting-started/luau/luau-overview


Додаток А

Посилання на відео : https://youtu.be/x1jbcyC11Ig

0:21  Чому Lua 
0:53  Найпопулярніша сфера застосувань Lua 
1:30  Основа якісного коду 
1:57  Стиль 
2:25  Рекомендація 1 local 
2:58  Рекомендація 2 cтандарти іменування 
3:30  Рекомендація 3 чітка індексація табилць
3:58  Рекомендація 4 коментарі 
4:34  Рекомендація 5 кешування доступу для підвищення швидкості
5:09  Рекомендація 6 pcall 
5:46  Висновок 
6:11  Використані джерела 


Додаток Б
Слайди презентації:


Рисунок 7 – Слайд 1 




Рисунок 8 – Слайд 2 


Рисунок 9 – Слайд 3






Рисунок 10 – Слайд 4


Рисунок 11 – Слайд 5






Рисунок 12 – Слайд 6


Рисунок 13 – Слайд 7






Рисунок 14 – Слайд 8



Рисунок 15 – Слайд 9





Рисунок 16 – Слайд 10


Рисунок 17 – Слайд 11






Рисунок 18 – Слайд 12
2


